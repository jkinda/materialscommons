import unittest
import pytest
import os.path as os_path
from random import randint
import configparser

from globus_sdk import TransferAPIError

# pip install materials-commons
from materials_commons.api import create_project, Project, Directory

from .base_class_lib import ApiConnection, Remote
from ..globus_service import MaterialsCommonsGlobusInterface as GlobusInterface

dir_in_source = "/"
dir_in_project = "/upload_test"
user_endoint_config_file_path = os_path.join('.globus_test', 'endpoint.ini')
config_file_locaton_for_user_endpoint = os_path.join(os_path.expanduser("~"), user_endoint_config_file_path)

def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestGlobusInterfaceSupport(unittest.TestCase):

    def test_db_connection(self):
        connection = ApiConnection()
        remote = Remote()
        test_url = remote.make_url('users')
        results = connection.get(test_url)
        self.assertIsNotNone(results)

    def test_db_test_users(self):
        connection = ApiConnection()
        remote = Remote()
        test_url = remote.make_url('users')
        results = connection.get(test_url)
        self.assertIsNotNone(results)
        self.assertEquals(type(results), list)
        self.assertEquals(len(results), 4, "Expecting test database with 4 users")
        missing = []
        all_test_users = ["admin@test.mc", "another@test.mc", "test@test.mc", "tadmin@test.mc"]
        users = []
        for user in results:
            users.append(user['id'])
        for probe in all_test_users:
            if probe not in users:
                missing.append(probe)
        self.assertEqual(len(missing), 0, "Some test users are missing: " + ". ".join(missing))

    def test_globus_auth_client(self):
        mc_user_id = "test@test.mc"
        globus = GlobusInterface(mc_user_id)
        self.assertIsNotNone(globus)
        client = globus.get_auth_client()
        self.assertIsNotNone(client, "Unable to obtain a authorization client from the Globus interface")

    def test_globus_transfer_interface(self):
        mc_user_id = "test@test.mc"
        globus = GlobusInterface(mc_user_id)
        self.assertIsNotNone(globus)
        auth_client = globus.get_auth_client()
        self.assertIsNotNone(auth_client, "Unable to obtain a authorization client from the Globus interface")
        transfer = globus.get_transfer_interface(auth_client)
        self.assertIsNotNone(transfer, "Unable to obtain a transfer interface from the Globus interface")

    def test_that_local_and_remote_code_are_same_version(self):
        mc_user_id = "test@test.mc"
        globus_interface = GlobusInterface(mc_user_id)
        local_version = globus_interface.version

        connection = ApiConnection()
        remote = Remote()
        url = remote.make_url('mcglobus/version')
        results = connection.get(url)
        remote_version = results['version']
        self.assertEqual(local_version, remote_version, "Service may not be running the code being tested")

    def test_invalid_endpoint_raises_exception(self):
        mc_user_id = "test@test.mc"
        globus_interface = GlobusInterface(mc_user_id)
        self.assertIsNotNone(globus_interface)
        auth_client = globus_interface.get_auth_client()
        self.assertIsNotNone(auth_client, "Unable to obtain a authorization client from the Globus interface")
        transfer = globus_interface.get_transfer_interface(auth_client)
        self.assertIsNotNone(transfer, "Unable to obtain a transfer interface from the Globus interface")
        with pytest.raises(TransferAPIError):
            transfer.get_endpoint("invalid-endpoint-id")

    def test_that_materials_commons_endpoint_exists(self):
        mc_user_id = "test@test.mc"
        globus_interface = GlobusInterface(mc_user_id)
        self.assertIsNotNone(globus_interface)
        auth_client = globus_interface.get_auth_client()
        self.assertIsNotNone(auth_client, "Unable to obtain a authorization client from the Globus interface")
        transfer = globus_interface.get_transfer_interface(auth_client)
        self.assertIsNotNone(transfer, "Unable to obtain a transfer interface from the Globus interface")
        target_endpoint = transfer.get_endpoint(globus_interface.mc_target_ep_id)
        self.assertIsNotNone(target_endpoint)
        self.assertEqual(target_endpoint['id'], globus_interface.mc_target_ep_id)

    def test_create_project_object(self):
        name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        project = create_project(name, description)
        self.assertIsNotNone(project.name)
        self.assertTrue(isinstance(project, Project))
        self.assertIsNotNone(project.description)
        self.assertIsNotNone(project.id)
        self.assertNotEqual(project.name, "")
        self.assertEqual(name, project.name)
        self.assertEqual(description, project.description)

    def test_target_project_directory(self):
        name = fake_name("TestProject-")
        description = "Test project generated by automated test"
        project = create_project(name, description)
        self.assertEqual(name, project.name)
        top_directory = project.get_top_directory()
        self.assertIsNotNone(top_directory)
        self.assertTrue(isinstance(top_directory, Directory))
        directory = project.add_directory(dir_in_project)
        self.assertIsNotNone(directory)
        self.assertTrue(isinstance(directory, Directory))
        self.assertEqual(directory.name, project.name + dir_in_project)


@pytest.mark.skip(reason="This test requires that a Globus test endpoint be set up and available")
class TestGlobusInterfaceUpload(unittest.TestCase):
    def test_that_user_supplied_test_endpoint_exists(self):
        # See test setup notes on setting up test endpoint: Readme.md !!!
        test_endpoint_id = self._get_user_globus_endpoint()
        print(test_endpoint_id)
        self.assertIsNotNone(test_endpoint_id)
        mc_user_id = "test@test.mc"
        globus_interface = GlobusInterface(mc_user_id)
        transfer = globus_interface.get_transfer_interface(globus_interface.get_auth_client())
        self.assertIsNotNone(transfer, "Unable to obtain a transfer interface from the Globus interface")
        user_test_endpoint = transfer.get_endpoint(test_endpoint_id)
        self.assertIsNotNone(user_test_endpoint)
        self.assertEqual(user_test_endpoint['id'], test_endpoint_id)

    def test_transfer_via_rest_interface(self):
        pass

    def test_user_endpoint_path_exists(self):
        pass
    #    self.assertIsNotNone(None, "Vas you dare, Charlie?")

    # def test_new_test(self)
    #     self.assertIsNotNone(None, "Vas you dare, Charlie?")

    def _get_user_globus_endpoint(self):
        config = configparser.ConfigParser()
        config.read(str(config_file_locaton_for_user_endpoint))
        return config['test']['endpoint']

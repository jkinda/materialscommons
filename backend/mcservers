#!/bin/sh

function is_running()
{
    ps -eo "pid,command" | grep "$1" | grep "$2" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' '
}

function docker_instance_running()
{
    docker ps -a | grep "$1\$" | grep "Up "
}

function build_mcstored()
{
    if [ "$NOBUILD" = "" ]; then
        (cd ${MCSTORE_SRC}; make server)
        cp ${MCSTORE_SRC}/server/mcstore/main/mcstored ${MCSTOREDBIN}
    fi
}

function must_be_mcuser()
{
    if [ "$USER" != "$MCUSER" ]; then
        if [ "$USER" != "root" ]; then
            echo "You must be ${MCUSER} or root to perform this action..."
            exit 1
        fi
    fi
}

function start_servers()
{
    echo Starting $SERVERTYPE servers...
    mkdir $MC_LOG_DIR 2> /dev/null

    R=$(docker_instance_running $MC_ES_NAME)
    if [ "$R" = "" ]; then
        echo "  Starting Elasticsearch instance $MC_ES_NAME..."
        docker start $MC_ES_NAME
    fi

    R=$(is_running "rethinkdb" "driver-port $MCDB_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting rethinkdb..."
        (cd $MCDB_DIR; rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon)
        scripts/db_running.py --port $MCDB_PORT
        echo "  Setting up database..."
        scripts/dbcreate.py
        if [ $TESTSERVER != false ]; then
            if [ "$REINIT" = "t" ]; then
                echo "  Restoring from file $MCDB_FILE..."
                cp $MCDB_FILE $MCDB_DIR
                FILE=$(basename $MCDB_FILE)
                rethinkdb restore $MCDB_DIR/$FILE --connect localhost:$MCDB_PORT --force
                if [ $? -ne 0 ]; then
                    rethinkdb restore $MCDB_DIR/$FILE --connect localhost:$MCDB_PORT --force
                fi
            fi
        fi
    fi

    R=$(is_running "mcapiserver.py" "p $MC_SERVICE_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcapiserver..."
        ./mcapiserver.py -p $MC_SERVICE_PORT > ${MC_LOG_DIR}/mcapiserver.out.${SERVERTYPE} 2>&1&
        sleep 1
    fi

    R=$(is_running "mcstored" "db-connect=localhost:$MCDB_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcstored..."
        build_mcstored
        ${MCSTOREDBIN} --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect="localhost:$MCDB_PORT" --es-url=${MC_ES_URL} > ${MC_LOG_DIR}/mcstored.out.${SERVERTYPE} 2>&1&
        sleep 1
    fi

    echo "  Building server lib..."
    gulp build-lib

    R=$(is_running "sbin/mcapi/mcapi.js" "p $MC_API_SERVICE_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcapi..."
        gulp build-mcapi-server
        node sbin/mcapi/mcapi.js -p $MC_API_SERVICE_PORT > ${MC_LOG_DIR}/mcapi.out.${SERVERTYPE} 2>&1&
        sleep 1
    fi

    R=$(is_running "sbin/mcpub/mcpub.js" "p $MC_PUB_SERVICE_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcpub..."
        gulp build-mcpub-server
        node sbin/mcpub/mcpub.js -p $MC_PUB_SERVICE_PORT > ${MC_LOG_DIR}/mcpub.out.${SERVERTYPE} 2>&1&
        sleep 1
    fi

    disown -a
    echo Started $SERVERTYPE.
}

function stop_servers()
{
    if [ "$TESTSERVER" = "p" ]; then
        echo "**** You are stopping PRODUCTION ****"
        read -p "Are you sure you want to do this [y/n]? " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 0
        else
            echo "Shutting down production in 5 seconds CTRL-C to abort..."
            sleep 5
        fi
    fi

    echo Stopping $SERVERTYPE servers....

    R=$(docker_instance_running $MC_ES_NAME)
    if [ "$R" != "" ]; then
        docker stop $MC_ES_NAME
    fi

    ps -eo "pid,command" | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ' | while read line
    do
        kill $line
    done

    MCSTORED_PID=$(ps -eo "pid,command" | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$MCSTORED_PID" != "" ]; then
        kill $MCSTORED_PID
    fi

    MCAPI_PID=$(ps -eo "pid,command" | grep "mcapi.js" | grep "p $MC_API_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$MCAPI_PID" != "" ]; then
        kill $MCAPI_PID
    fi

    MCPUB_PID=$(ps -eo "pid,command" | grep "mcpub.js" | grep "p $MC_PUB_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$MCPUB_PID" != "" ]; then
        kill $MCPUB_PID
    fi

    RPID=$(ps -eo "pid,command" | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep | head -1 | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$RPID" != "" ]; then
        kill $RPID
    fi

    echo Stopped $SERVERTYPE.
}

function stop_named_server()
{
    case "$1" in
        mcapiserver)
            echo Stopping mcapiserver...
            ps -eo "pid,command" | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ' | while read line
            do
                kill $line
                echo Stopped mcapiserver with pid $line
            done
            ;;

        mcstored)
            echo Stopping mcstored...
            MCSTORED_PID=$(ps -eo "pid,command" | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$MCSTORED_PID" != "" ]; then
                kill $MCSTORED_PID
                echo Stopped mcstored with pid $MCSTORED_PID
            fi
            ;;

        mcapi)
            echo Stopping mcapi...
            MCAPI_PID=$(ps -eo "pid,command" | grep "mcapi.js" | grep "p $MC_API_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$MCAPI_PID" != "" ]; then
                kill $MCAPI_PID
                echo Stopped mcapi with pid $MCAPI_PID
            fi
            ;;

        mcpub)
            echo Stopping mcpub...
            MCPUB_PID=$(ps -eo "pid,command" | grep "mcpub.js" | grep "p $MC_PUB_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$MCPUB_PID" != "" ]; then
                kill $MCPUB_PID
                echo Stopped mcpub with pid $MCPUB_PID
            fi
            ;;

        es)
            echo Stopping Elasticsearch...
            R=$(docker_instance_running ${MC_ES_NAME})
            if [ "$R" != "" ]; then
                docker stop $MC_ES_NAME
                echo Stopped Elasticsearch docker instance ${MC_ES_NAME}
            fi
            ;;

        *)
            echo "Unknown server: $1"
            exit 1
            ;;
    esac
}

function restart_named_server()
{
    stop_named_server $1
    case "$1" in
        mcapiserver)
            echo "  Starting mcapiserver..."
            ./mcapiserver.py -p $MC_SERVICE_PORT > ${MC_LOG_DIR}/mcapiserver.out.${SERVERTYPE} 2>&1&
            ;;

        mcstored)
            echo "  Starting mcstored..."
            build_mcstored
            ${MCSTOREDBIN} --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect="localhost:$MCDB_PORT" --es-url=${MC_ES_URL} > ${MC_LOG_DIR}/mcstored.out.${SERVERTYPE} 2>&1&
            ;;

        mcapi)
            echo "  Starting mcapi..."
            gulp build-mcapi-server-lib
            node sbin/mcapi/mcapi.js -p $MC_API_SERVICE_PORT > ${MC_LOG_DIR}/mcapi.out.${SERVERTYPE} 2>&1&
            ;;

        mcpub)
            echo "  Starting mcpub..."
            gulp build-mcpub-server-lib
            node sbin/mcpub/mcpub.js -p $MC_PUB_SERVICE_PORT > ${MC_LOG_DIR}/mcpub.out.${SERVERTYPE} 2>&1&
            ;;

        es)
            echo "  Start Elasticsearch docker instance ${MC_ES_NAME}..."
            R=$(docker_instance_running ${MC_ES_NAME})
            if [ "$R" = "" ]; then
                docker start ${MC_ES_NAME}
            fi
            ;;

        *)
            echo "Unknown server: $1"
            exit 1
            ;;
    esac

    disown -a
    echo Restarted Server $1 for server type $SERVERTYPE.
}

function status_servers()
{
    export MCDB_PORT=28015
    export MC_SERVICE_PORT=5000
    export MC_API_SERVICE_PORT=3000
    export MC_PUB_SERVICE_PORT=5014
    echo
    echo "RethinkDB (production):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "Elasticsearch (production):"
    R=$(docker_instance_running mc-es)
    if [ "$R" != "" ]; then
        echo ${R}
    fi
    echo
    echo "MCAPI Server (production):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCAPI Node Server (production):"
    ps -ef | grep mcapi.js | grep "p $MC_API_SERVICE_PORT" | grep -v grep
    echo
    echo "MCPUB Node Server (production):"
    ps -ef | grep mcpub.js | grep "p $MC_PUB_SERVICE_PORT" | grep -v grep
    echo
    echo "MCSTORED Server (production):"
    ps -ef | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    echo
    echo ======================================================
    echo
    export MCDB_PORT=30815
    export MC_SERVICE_PORT=5002
    export MC_API_SERVICE_PORT=5004
    export MC_PUB_SERVICE_PORT=5026
    echo "RethinkDB (test/unit):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "Elasticsearch (test/unit):"
    R=$(docker_instance_running mc-es-test)
    if [ "$R" != "" ]; then
        echo ${R}
    fi
    echo
    echo "MCAPI Server (test/unit):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCAPI Node Server (test/unit):"
    ps -ef | grep mcapi.js | grep "p $MC_API_SERVICE_PORT" | grep -v grep
    echo
    echo "MCPUB Node Server (test/unit):"
    ps -ef | grep mcpub.js | grep "p $MC_PUB_SERVICE_PORT" | grep -v grep
    echo
    echo "MCSTORED Server (test/unit):"
    ps -ef | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    echo
}

function show_env()
{
    echo "========= ${SERVERTYPE} ========="
    echo " Environment: "
    echo "   MCDB_PORT:              ${MCDB_PORT}"
    echo "   MC_SERVICE_PORT:        ${MC_SERVICE_PORT}"
    echo "   MC_API_SERVICE_PORT:    ${MC_API_SERVICE_PORT}"
    echo "   MC_PUB_SERVICE_PORT:    ${MC_PUB_SERVICE_PORT}"
    echo "   RETHINKDB_HTTP_PORT:    ${RETHINKDB_HTTP_PORT}"
    echo "   RETHINKDB_CLUSTER_PORT: ${RETHINKDB_CLUSTER_PORT}"
    echo "   MCDB_DIR:               ${MCDB_DIR}"
    echo "   MCDIR:                  ${MCDIR}"
    echo "   MCFS_HTTP_PORT:         ${MCFS_HTTP_PORT}"
    echo "   MCDB_CONNECTION:        ${MCDB_CONNECTION}"
    echo "   MC_ES_URL:              ${MC_ES_URL}"
    echo " Binary paths:"
    echo "   rethinkdb binary:       $(which rethinkdb)"
    echo "   mcapiserver.py binary:  $(which mcapiserver.py)"
    echo "   mcstored binary:        $(which mcstored)"
    echo "   mcapi.js binary:        sbin/mcapi.js"
    echo " Commands: "
    echo "   rethinkdb command:      rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon"
    echo "   mcapiserver.py command: mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapiserver.out.${SERVERTYPE} 2>&1&"
    echo "   mcstored command:       mcstored --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect=localhost:$MCDB_PORT --es-url=${MC_ES_URL} > /tmp/mcstored.out.${SERVERTYPE} 2>&1&"
    echo "   mcapi.js command:       gulp build-server && node sbin/mcapi.js -p $MC_API_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&"
    if [ ${SERVERTYPE} = "production" ]; then
        echo "   Elasticsearch command:  sudo docker start mc-es"
    else
        echo "   Elasticsearch command:  sudo docker start mc-es-test"
    fi
    echo
    echo
    echo "*** You will need to start the docker container for Elasticsearch ***"
    echo "*** before starting the servers with 'mcservers start' command.   ***"
    echo
    echo
}

function tail_servers() {
    D=${MC_LOG_DIR}
    ST=${SERVERTYPE}
    # Ensure files exist
    touch ${D}/mcapiserver.out.${ST} ${D}/mcstored.out.${ST} ${D}/mcapi.out.${ST} ${D}/mcpub.out.${ST}
    tail -f ${D}/mcapiserver.out.${ST} -f ${D}/mcstored.out.${ST} -f ${D}/mcapi.out.${ST} -f ${D}/mcpub.out.${ST}
}

function update_mc() {
    export DB_BACKUP=/tmp/rethinkdb.update.tar.gz
    echo "Updating Materials Commons deployment..."
    echo "  Updating code for materialscommons.org and mcstore...."
    git pull
    (cd ${MCSTORE_SRC}; git pull)

    echo "  Creating database backup..."
    rm -f ${DB_BACKUP}
    (rethinkdb dump -c localhost:${MCDB_PORT} -f ${DB_BACKUP})
    echo You can restore from the database backup at ${DB_BACKUP}

    echo "  Performing optional conversion on database..."
    read -p "Do you want to run the conversion script [y/n]? " -n 1 -r
    echo
    if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
        echo "  Skipping conversion..."
    else
        echo "Please stop nginx before starting conversion..."
        read -p "Has nginx been stopped [y/n]? " -n 1 -r
        if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
            echo "You did not stop nginx, exiting update..."
            exit 1
        fi
        echo "  Performing database conversion..."
        stop_named_server mcstored
        scripts/conversion/convert.py --port ${MCDB_PORT}
    fi

    echo "  Stopping servers..."
    stop_servers

    echo "  Updating server dependencies..."
    npm install

    echo "Updating mcapp.data dependencies..."
    (cd ../website/mcapp.data; bower install)

    echo "Updating mcapp.projects dependencies..."
    (cd ../website/mcapp.projects; bower install)

    echo "  All updates completed..."
    echo "  Starting servers..."
    start_servers

    read -p "Delete database backup created for the update [y/n]? " -n 1 -r
    echo
    if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
        echo "Keeping database backup located at ${DB_BACKUP}"
    else
        echo "Deleting database backup at ${DB_BACKUP}"
        rm -f ${DB_BACKUP}
    fi

    echo "Update completed."
    echo "*** If you stopped nginx, please restart it ***"
}

function setup_server_env()
{
    if [ "$TESTSERVER" = "t" ]; then
        export MC_SERVICE_PORT=5002
        export MC_API_SERVICE_PORT=5004
        export MC_PUB_SERVICE_PORT=5026
        export MCDB_PORT=30815
        export MCDB_DIR=~/testdb
        export MCDB_CONNECTION="localhost:$MCDB_PORT"
        export RETHINKDB_HTTP_PORT=8090
        export RETHINKDB_CLUSTER_PORT=31815
        export MCSTOREDBIN=testbin/mcstored
        export MC_ES_URL="http://localhost:9500"
        export MC_ES_NAME="mc-es-test"
        export MC_LOG_DIR=/var/log/materialscommons/test
        if [ "$MCDB_FILE" = "" ]; then
            export MCDB_FILE=~/test_data/rethinkdb_dump_test_data.tar.gz
        fi

        if [ $(hostname) = "materialscommons" ]; then
            export MCDIR=/mcfs/data/test:/mcfs/data/materialscommons
        else
            export MCDIR=~/mcdir/mcfs/data/test:/mcfs/data/materialscommons
        fi
        export MCFS_HTTP_PORT=5012

        if [ -f /etc/materialscommons/config.test ]; then
            . /etc/materialscommons/config.test
        fi

        if [ ! -d $MCDB_DIR ]; then
            mkdir $MCDB_DIR
        fi

        if [ "$REINIT" = "t" ]; then
            (cd $MCDB_DIR; rm -rf rethinkdb_data)
        fi
    elif [ "$TESTSERVER" = "u" ]; then
        export MC_SERVICE_PORT=5002
        export MC_API_SERVICE_PORT=5004
        export MC_PUB_SERVICE_PORT=5026
        export MCDB_PORT=30815
        export MCDB_CONNECTION="localhost:$MCDB_PORT"
        export MCDB_DIR=~/testdb
        export RETHINKDB_HTTP_PORT=8090
        export RETHINKDB_CLUSTER_PORT=31815
        export MCSTOREDBIN=testbin/mcstored
        export MC_ES_URL="http://localhost:9500"
        export MC_ES_NAME="mc-es-test"
        export MC_LOG_DIR=/tmp
        if [ "$MCDB_FILE" = "" ]; then
            export MCDB_FILE=../test_data/rethinkdb_dump_test_data.tar.gz
        fi
        export MCDIR=~/mcdir/mcfs/data/test:/mcfs/data/materialscommons
        export MCFS_HTTP_PORT=5012

        if [ -f /etc/materialscommons/config.unit ]; then
            . /etc/materialscommons/config.unit
        fi

        if [ ! -d $MCDB_DIR ]; then
            mkdir $MCDB_DIR
        fi

        if [ "$REINIT" = "t" ]; then
            (cd $MCDB_DIR; rm -rf rethinkdb_data)
        fi
    elif [ "$TESTSERVER" = "p" ]; then
        export MCDB_PORT=28015
        export MCDB_CONNECTION="localhost:$MCDB_PORT"
        export MC_API_SERVICE_PORT=3000
        export MC_PUB_SERVICE_PORT=5014
        export MC_SERVICE_PORT=5000
        export RETHINKDB_HTTP_PORT=8080
        export RETHINKDB_CLUSTER_PORT=29015
        export MCSTOREDBIN=prodbin/mcstored
        export MCDB_DIR=~
        export MC_ES_URL="http://localhost:9200"
        export MC_ES_NAME="mc-es"
        export MC_LOG_DIR=/var/log/materialscommons/production
        if [ $(hostname) = "materialscommons" ]; then
            export MCDIR=/mcfs/data/materialscommons
        else
            export MCDIR=~/mcdir/mcfs/data/materialscommons:/mcfs/data/materialscommons
        fi
        export MCFS_HTTP_PORT=5010

        if [ -f /etc/materialscommons/config.prod ]; then
            . /etc/materialscommons/config.prod
        fi
    else
        # Default to unit
        export MC_SERVICE_PORT=5002
        export MC_API_SERVICE_PORT=5004
        export MC_PUB_SERVICE_PORT=5026
        export MCDB_PORT=30815
        export MCDB_CONNECTION="localhost:$MCDB_PORT"
        export MCDB_DIR=~/testdb
        export RETHINKDB_HTTP_PORT=8090
        export RETHINKDB_CLUSTER_PORT=31815
        export MCSTOREDBIN=testbin/mcstored
        export MC_ES_URL="http://localhost:9500"
        if [ "$MCDB_FILE" = "" ]; then
            export MCDB_FILE=../test_data/rethinkdb_dump_test_data.tar.gz
        fi
        export MCDIR=~/mcdir/mcfs/data/test:/mcfs/data/materialscommons
        export MCFS_HTTP_PORT=5012

        if [ -f /etc/materialscommons/config.unit ]; then
            . /etc/materialscommons/config.unit
        fi

        if [ ! -d $MCDB_DIR ]; then
            mkdir $MCDB_DIR
        fi

        if [ "$REINIT" = "t" ]; then
            (cd $MCDB_DIR; rm -rf rethinkdb_data)
        fi
    fi
}

function show_help() {
    echo "mcservers [start|stop|sr|ss|status|env|tail|update|help] [-u | -t | -p] [-n] [-r]"
    echo "  The mcservers command with no arguments will run the status command."
    echo "  If no environment flagged is specified mcservers defaults to -u"
    echo
    echo "    -u: Unit environment"
    echo "    -t: Test environment"
    echo "    -p: Production environment"
    echo "    -n: Do not recompile mcstored"
    echo "    -r: Reload database from file pointed at by MCDB_FILE env variable"
    echo
    echo "  start [-u | -t | -p] [-n] [-r]: Starts servers. Will only start servers not currently running."
    echo "  stop [-u | -t | -p]: Stops all servers."
    echo "  sr|srestart <server-name>  [-u | -t | -p] [-n]: Restart the named server in the given environment- mcapiserver|mcstored|mcapi|mcpub|es."
    echo "  ss|sstop <server-name>  [-u | -t | -p]: Stop the named server in the given environment - mcapiserver|mcstored|mcapi|mcpub|es."
    echo "  ss <server-name>  [-u | -t | -p]: Stop the named server in the given environment - mcapiserver|mcstored|mcapi|mcpub|es."
    echo "  status: Shows the status for all given services in all the environments."
    echo "  env: Shows the paths, environment variables, and other info for all the environments."
    echo "  tail [-u | -t | -p]: Tails all the logs for all servers for the given environment."
    echo "  update [-u | -t | -p] [-n] [-r]: Updates Materials Commons from the current branch for the given environment. Includes mcstore repository."
}

export MCDB_NAME="materialscommons"
export MCDB_TYPE="rethinkdb"

if [ -f /etc/materialscommons/config.global ]; then
    . /etc/materialscommons/config.global
fi

if [ "$MCUSER" = "" ]; then
    export MCUSER=$USER
fi

export MCSTORE_SRC=$HOME/workspace/src/github.com/materials-commons/mcstore

# Set defaults
TESTSERVER="u"
SERVERTYPE="unit"
REINIT=f

MC_SERVICE_NAME=""

CMD=$1
shift

if [ "$CMD" = "sstop" ]; then
    MC_SERVICE_NAME=$1
    shift
elif [ "$CMD" = "sr" ]; then
    MC_SERVICE_NAME=$1
    shift
elif [ "$CMD" = "-h" ]; then
    show_help
    exit 0
fi

while test $# -gt 0; do
    case "$1" in
        -u)
            TESTSERVER=u
            SERVERTYPE="unit"
            ;;
        -t)
            TESTSERVER=t
            SERVERTYPE="test"
            ;;
        -p)
            TESTSERVER=p
            SERVERTYPE="production"
            ;;
        -n)
            NOBUILD="-n"
            ;;
        -r)
            REINIT=t
            ;;
    esac
    shift
done

setup_server_env

case "$CMD" in
    env)
        show_env
        ;;

    help)
        show_help
        ;;

    start)
        must_be_mcuser
        start_servers
        ;;

    stop)
        must_be_mcuser
        stop_servers
        ;;

    srestart)
        must_be_mcuser
        restart_named_server ${MC_SERVICE_NAME}
        ;;

    sr)
        must_be_mcuser
        restart_named_server ${MC_SERVICE_NAME}
        ;;

    sstop)
        must_be_mcuser
        stop_named_server ${MC_SERVICE_NAME}
        ;;

    ss)
        must_be_mcuser
        stop_named_server ${MC_SERVICE_NAME}
        ;;

    status)
        status_servers
        ;;

    tail)
        tail_servers
        ;;

    update)
        must_be_mcuser
        update_mc
        ;;

    "")
        status_servers
        ;;

    *)
        echo "Unknown command: $CMD"
        exit 1
        ;;
esac

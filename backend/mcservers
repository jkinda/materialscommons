#!/bin/sh

CMD="$1"

TESTING="$2"
INITFLAG="$3"
TESTSERVER=false
SERVERTYPE="unit"

if [ "$1" = "sstop" ]; then
    export TESTING="$3"
elif [ "$1" = "sr" ]; then
    export TESTING="$3"
fi

function is_running()
{
    ps -eo "pid,command" | grep "$1" | grep "$2" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' '
}

function start_servers()
{
    echo Starting $SERVERTYPE servers...
    R=$(is_running "rethinkdb" "driver-port $MCDB_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting rethinkdb..."
        (cd $MCDB_DIR; rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon)
        sleep 5
        echo "  Setting up database..."
        scripts/dbcreate.py
        if [ $TESTSERVER != false ]; then
            if [ "$REINIT" = "t" ]; then
                echo "  Restoring from file $MCDB_FILE..."
                cp $MCDB_FILE $MCDB_DIR
                FILE=$(basename $MCDB_FILE)
                rethinkdb restore $MCDB_DIR/$FILE --connect localhost:$MCDB_PORT --force
                if [ $? -ne 0 ]; then
                    rethinkdb restore $MCDB_DIR/$FILE --connect localhost:$MCDB_PORT --force
                fi
            fi
        fi
    fi

    R=$(is_running "mcapiserver.py" "p $MC_SERVICE_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcapiserver..."
        ./mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapiserver.out.${SERVERTYPE} 2>&1&
    fi

    R=$(is_running "mcstored" "db-connect=localhost:$MCDB_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcstored..."
        mcstored --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect="localhost:$MCDB_PORT" --es-url=${MC_ES_URL} > /tmp/mcstored.out.${SERVERTYPE} 2>&1&
    fi

    R=$(is_running "sbin/mcapi.js" "p $MC_API_SERVICE_PORT")
    if [ "$R" = "" ]; then
        echo "  Starting mcapi..."
        gulp build-server
        node sbin/mcapi.js -p $MC_API_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&
    fi

    if [ $TESTSERVER = "u" ]; then
        if [ $(hostname) != "materialscommons" ]; then
            R=$(is_running "web-server.js" 8000)
            if [ "$R" = "" ]; then
                (cd ../website; ./web-server.js 8000 > /tmp/webserver.out.${SERVERTYPE} 2>&1&)
            fi
        fi
    fi
    disown -a
    echo Started $SERVERTYPE.
}

function stop_servers()
{
    echo Stopping $SERVERTYPE servers....
    RPID=$(ps -eo "pid,command" | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep | head -1 | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$RPID" != "" ]; then
        kill $RPID
    fi
    ps -eo "pid,command" | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ' | while read line
    do
        kill $line
    done

    MCSTORED_PID=$(ps -eo "pid,command" | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$MCSTORED_PID" != "" ]; then
        kill $MCSTORED_PID
    fi

    APPMC_PID=$(ps -eo "pid,command" | grep "mcapi.js" | grep "p $MC_API_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$APPMC_PID" != "" ]; then
        kill $APPMC_PID
    fi

    if [ $TESTSERVER = "u" ]; then
        if [ $(hostname) != "materialscommons" ]; then
            WEBSERVER_PID=$(ps -eo "pid,command" | grep web-server.js | grep 8000 | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$WEBSERVER_PID" != "" ]; then
                kill $WEBSERVER_PID
            fi
        fi
    fi
    echo Stopped $SERVERTYPE.
}

function stop_named_server()
{
    case "$1" in
        mcapiserver)
            echo Stopping mcapiserver...
            ps -eo "pid,command" | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ' | while read line
            do
                kill $line
                echo Stopped mcapiserver with pid $line
            done
            ;;

        mcstored)
            echo Stopping mcstored...
            MCSTORED_PID=$(ps -eo "pid,command" | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$MCSTORED_PID" != "" ]; then
                kill $MCSTORED_PID
                echo Stopped mcstored with pid $MCSTORED_PID
            fi
            ;;

        mcapi)
            echo Stopping mcapi...
            APPMC_PID=$(ps -eo "pid,command" | grep "mcapi.js" | grep "p $MC_API_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$APPMC_PID" != "" ]; then
                kill $APPMC_PID
                echo Stopped mcapi with pid $APPMC_PID
            fi
            ;;

        *)
            echo "Unknown server: $1"
            exit 1
            ;;
    esac
}

function restart_named_server()
{
    stop_named_server $1
    case "$1" in
        mcapiserver)
            echo "  Starting mcapiserver..."
            ./mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapiserver.out.${SERVERTYPE} 2>&1&
            ;;

        mcstored)
            echo "  Starting mcstored..."
            mcstored --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect="localhost:$MCDB_PORT" --es-url=${MC_ES_URL} > /tmp/mcstored.out.${SERVERTYPE} 2>&1&
            ;;

        mcapi)
            echo "  Starting mcapi..."
            gulp build-server
            node sbin/mcapi.js -p $MC_API_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&
            ;;

        *)
            echo "Unknown server: $1"
            exit 1
            ;;
    esac

    disown -a
    echo Restarted Server $1 for server type $SERVERTYPE.
}

function status_servers()
{
    export MCDB_PORT=28015
    export MC_SERVICE_PORT=5000
    export MC_API_SERVICE_PORT=3000
    echo
    echo "RethinkDB (production):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "MCAPI Server (production):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCAPI Node Server (production):"
    ps -ef | grep mcapi.js | grep "p $MC_API_SERVICE_PORT" | grep -v grep
    echo
    echo "MCSTORED Server (production):"
    ps -ef | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    echo
    echo ======================================================
    echo
    export MCDB_PORT=30815
    export MC_SERVICE_PORT=5002
    export MC_API_SERVICE_PORT=5004
    echo "RethinkDB (test/unit):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "MCAPI Server (test/unit):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCAPI Node Server (test/unit):"
    ps -ef | grep mcapi.js | grep "p $MC_API_SERVICE_PORT" | grep -v grep
    echo
    echo "MCSTORED Server (test/unit):"
    ps -ef | grep mcstored | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    if [ $(hostname) != "materialscommons" ]; then
        echo
        echo "Webserver (test/unit):"
        ps -ef | grep web-server.js | grep 8000 | grep -v grep
    fi
    echo
}

function show_env()
{
    echo "========= ${SERVERTYPE} ========="
    echo " Environment: "
    echo "   MCDB_PORT:              ${MCDB_PORT}"
    echo "   MC_SERVICE_PORT:        ${MC_SERVICE_PORT}"
    echo "   MC_API_SERVICE_PORT:    ${MC_API_SERVICE_PORT}"
    echo "   RETHINKDB_HTTP_PORT:    ${RETHINKDB_HTTP_PORT}"
    echo "   RETHINKDB_CLUSTER_PORT: ${RETHINKDB_CLUSTER_PORT}"
    echo "   MCDB_DIR:               ${MCDB_DIR}"
    echo "   MCDIR:                  ${MCDIR}"
    echo "   MCFS_HTTP_PORT:         ${MCFS_HTTP_PORT}"
    echo "   MCDB_CONNECTION:        ${MCDB_CONNECTION}"
    echo "   MC_ES_URL:              ${MC_ES_URL}"
    echo " Binary paths:"
    echo "   rethinkdb binary:       $(which rethinkdb)"
    echo "   mcapiserver.py binary:  $(which mcapiserver.py)"
    echo "   mcstored binary:        $(which mcstored)"
    echo "   mcapi.js binary:        sbin/mcapi.js"
    echo " Commands: "
    echo "   rethinkdb command:      rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon"
    echo "   mcapiserver.py command: mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapiserver.out.${SERVERTYPE} 2>&1&"
    echo "   mcstored command:       mcstored --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect=localhost:$MCDB_PORT --es-url=${MC_ES_URL} > /tmp/mcstored.out.${SERVERTYPE} 2>&1&"
    echo "   mcapi.js command:       gulp build-server && node sbin/mcapi.js -p $MC_API_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&"
    if [ ${SERVERTYPE} = "production" ]; then
        echo "   Elasticsearch command:  sudo docker start mc-es"
    else
        echo "   Elasticsearch command:  sudo docker start mc-es-test"
    fi
    echo
    echo
    echo "*** You will need to start the docker container for Elasticsearch ***"
    echo "*** before starting the servers with 'mcservers start' command.   ***"
    echo
    echo
}

export MCDB_NAME="materialscommons"
export MCDB_TYPE="rethinkdb"

if [ "$TESTING" = "-u" ]; then
    TESTSERVER=u
    SERVERTYPE="unit"
elif [ "$TESTING" = "-t" ]; then
    TESTSERVER=t
    SERVERTYPE="test"
elif [ "$TESTING" = "-p" ]; then
    TESTSERVER=p
    SERVERTYPE="production"
else
    TESTSERVER=u
    SERVERTYPE="unit"
fi

REINIT=f

if [ "$INITFLAG" = "-r" ]; then
    REINIT=t
fi

if [ $TESTSERVER = "t" ]; then
    export MC_SERVICE_PORT=5002
    export MC_API_SERVICE_PORT=5004
    export MCDB_PORT=30815
    export MCDB_DIR=~/testdb
    export MCDB_CONNECTION="localhost:$MCDB_PORT"
    export RETHINKDB_HTTP_PORT=8090
    export RETHINKDB_CLUSTER_PORT=31815
    export MC_ES_URL="http://localhost:9500"
    if [ "$MCDB_FILE" = "" ]; then
        export MCDB_FILE=~/test_data/rethinkdb_dump_test_data.tar.gz
    fi
    if [ $(hostname) = "materialscommons" ]; then
        export MCDIR=/mcfs/data/test
    else
        export MCDIR=~/mcdir/mcfs/data/test
    fi
    export MCFS_HTTP_PORT=5012

    if [ -f /etc/materialscommons/config.test ]; then
        . /etc/materialscommons/config.test
    fi
    if [ ! -d $MCDB_DIR ]; then
        mkdir $MCDB_DIR
    fi
    if [ "$REINIT" = "t" ]; then
        (cd $MCDB_DIR; rm -rf rethinkdb_data)
    fi
elif [ $TESTSERVER = "u" ]; then
    export MC_SERVICE_PORT=5002
    export MC_API_SERVICE_PORT=5004
    export MCDB_PORT=30815
    export MCDB_CONNECTION="localhost:$MCDB_PORT"
    export MCDB_DIR=~/testdb
    export RETHINKDB_HTTP_PORT=8090
    export RETHINKDB_CLUSTER_PORT=31815
    export MC_ES_URL="http://localhost:9500"
    if [ "$MCDB_FILE" = "" ]; then
        export MCDB_FILE=../test_data/rethinkdb_dump_test_data.tar.gz
    fi
    export MCDIR=~/mcdir/mcfs/data/test
    export MCFS_HTTP_PORT=5012

    if [ -f /etc/materialscommons/config.unit ]; then
        . /etc/materialscommons/config.unit
    fi
    if [ ! -d $MCDB_DIR ]; then
        mkdir $MCDB_DIR
    fi
    if [ "$REINIT" = "t" ]; then
        (cd $MCDB_DIR; rm -rf rethinkdb_data)
    fi
elif [ "$TESTSERVER" = "p" ]; then
    export MCDB_PORT=28015
    export MCDB_CONNECTION="localhost:$MCDB_PORT"
    export MC_API_SERVICE_PORT=3000
    export MC_SERVICE_PORT=5000
    export RETHINKDB_HTTP_PORT=8080
    export RETHINKDB_CLUSTER_PORT=29015
    export MCDB_DIR=~
    export MC_ES_URL="http://localhost:9200"
    if [ $(hostname) = "materialscommons" ]; then
        export MCDIR=/mcfs/data/materialscommons
    else
        export MCDIR=~/mcdir/mcfs/data/materialscommons
    fi
    export MCFS_HTTP_PORT=5010

    if [ -f /etc/materialscommons/config.prod ]; then
        . /etc/materialscommons/config.prod
    fi
else
    # Default to unit
    export MC_SERVICE_PORT=5002
    export MC_API_SERVICE_PORT=5004
    export MCDB_PORT=30815
    export MCDB_CONNECTION="localhost:$MCDB_PORT"
    export MCDB_DIR=~/testdb
    export RETHINKDB_HTTP_PORT=8090
    export RETHINKDB_CLUSTER_PORT=31815
    export MC_ES_URL="http://localhost:9500"
    if [ "$MCDB_FILE" = "" ]; then
        export MCDB_FILE=../test_data/rethinkdb_dump_test_data.tar.gz
    fi
    export MCDIR=~/mcdir/mcfs/data/test
    export MCFS_HTTP_PORT=5012

    if [ -f /etc/materialscommons/config.unit ]; then
        . /etc/materialscommons/config.unit
    fi
    if [ ! -d $MCDB_DIR ]; then
        mkdir $MCDB_DIR
    fi
    if [ "$REINIT" = "t" ]; then
        (cd $MCDB_DIR; rm -rf rethinkdb_data)
    fi
fi

case "$CMD" in
    start)
        start_servers
        ;;
    stop)
        if [ $TESTSERVER = "p" ]; then
            echo "**** You are stopping PRODUCTION ****"
            read -p "Are you sure you want to do this [y/n]? " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 0
            else
                echo "Shutting down production in 5 seconds CTRL-C to abort..."
                sleep 5
            fi
        fi
        stop_servers
        ;;

    sstop)
        stop_named_server $2
        ;;

    sr)
        restart_named_server $2
        ;;

    status)
        status_servers
        ;;

    env)
        show_env
        ;;

    "")
        status_servers
        ;;

    *)
        echo "Unknown command: $CMD"
        exit 1
        ;;
esac

#!/bin/sh

CMD="$1"
TESTING="$2"
TESTSERVER=false
SERVERTYPE="production"

function start_servers()
{
    echo Starting $SERVERTYPE servers...
    ./mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&
    (cd $MCDB_DIR; rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon)
     
    sleep 3
    
    if [ $TESTSERVER = true ]; then
        cp ../test_data/rethinkdb_dump_test_data.tar.gz $MCDB_DIR
        rethinkdb restore $MCDB_DIR/rethinkdb_dump_test_data.tar.gz --connect localhost:$MCDB_PORT
    fi
    scripts/dbcreate.py
    mcfs --bind=0.0.0.0 --server-port=${MCFS_PORT} --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect=localhost:${MCDB_PORT} > /tmp/mcfs.out.${SERVERTYPE} 2>&1&

    if [ $TESTSERVER = true ]; then
        if [ $(hostname) != "materialscommons" ]; then
            (cd ../website; ./web-server.js 8000 > /tmp/webserver.out.${SERVERTYPE} 2>&1&)
        fi
    fi
    disown -a
    echo Started $SERVERTYPE.
}

function stop_servers()
{
    echo Stopping $SERVERTYPE servers....
    RPID=$(ps -eo "pid,command" | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep | head -1 | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$RPID" != "" ]; then
        kill $RPID
    fi
    ps -eo "pid,command" | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ' | while read line
    do
        kill $line
    done

    MCFS_PID=$(ps -eo "pid,command" | grep mcfs | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
    if [ "$MCFS_PID" != "" ]; then
        kill $MCFS_PID
    fi

    if [ $TESTSERVER = true ]; then
        (cd $MCDB_DIR; rm -rf rethinkdb_data)
        if [ $(hostname) != "materialscommons" ]; then
            WEBSERVER_PID=$(ps -eo "pid,command" | grep web-server.js | grep 8000 | grep -v grep | sed 's/^[ ]*//' | cut -f1 -d' ')
            if [ "$WEBSERVER_PID" != "" ]; then
                kill $WEBSERVER_PID
            fi
        fi
    fi
    echo Stopped $SERVERTYPE.
}

function status_servers()
{
    echo
    echo "RethinkDB (production):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "MCAPI Server (production):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCFS Server (production):"
    ps -ef | grep mcfs | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    echo
    echo ======================================================
    echo
    export MCDB_PORT=30815
    export MC_SERVICE_PORT=5002
    echo "RethinkDB (test):"
    ps -ef | grep rethinkdb | grep "driver-port $MCDB_PORT" | grep -v grep
    echo
    echo "MCAPI Server (test):"
    ps -ef | grep mcapiserver.py | grep "p $MC_SERVICE_PORT" | grep -v grep
    echo
    echo "MCFS Server (test):"
    ps -ef | grep mcfs | grep "db-connect=localhost:$MCDB_PORT" | grep -v grep
    if [ $(hostname) != "materialscommons" ]; then
        echo
        echo "Webserver (test):"
        ps -ef | grep web-server.js | grep 8000 | grep -v grep
    fi
    echo
}

function show_env()
{
    echo "========= ${SERVERTYPE} ========="
    echo " Environment: "
    echo "   MCDB_PORT:              ${MCDB_PORT}"
    echo "   MC_SERVICE_PORT:        ${MC_SERVICE_PORT}"
    echo "   RETHINKDB_HTTP_PORT:    ${RETHINKDB_HTTP_PORT}"
    echo "   RETHINKDB_CLUSTER_PORT: ${RETHINKDB_CLUSTER_PORT}"
    echo "   MCDB_DIR:               ${MCDB_DIR}"
    echo "   MCFS_PORT:              ${MCFS_PORT}"
    echo "   MCDIR:                  ${MCDIR}"
    echo "   MCFS_HTTP_PORT:         ${MCFS_HTTP_PORT}"
    echo " Binary paths:"
    echo "   rethinkdb binary:       $(which rethinkdb)"
    echo "   mcapiserver.py binary:  $(which mcapiserver.py)"
    echo "   mcfs binary:            $(which mcfs)"
    echo " Commands: "
    echo "   rethinkdb command:      rethinkdb --driver-port $MCDB_PORT --cluster-port $RETHINKDB_CLUSTER_PORT --http-port $RETHINKDB_HTTP_PORT --daemon"
    echo "   mcapiserver.py command: nohup mcapiserver.py -p $MC_SERVICE_PORT > /tmp/mcapi.out.${SERVERTYPE} 2>&1&"
    echo "   mcfs command:           nohup mcfs --bind=0.0.0.0 --server-port=${MCFS_PORT} --http-port=${MCFS_HTTP_PORT} --mcdir=${MCDIR} --db-connect=localhost:${MCDB_PORT} > /tmp/mcfs.out.${SERVERTYPE} 2>&1&"
}

if [ "$TESTING" = "-t" ]; then
    TESTSERVER=true
    SERVERTYPE="test"
fi

if [ $TESTSERVER = true ]; then
    export MC_SERVICE_PORT=5002
    export MCDB_PORT=30815
    export MCDB_DIR=~/testdb
    export RETHINKDB_HTTP_PORT=8090
    export RETHINKDB_CLUSTER_PORT=31815
    export MCFS_PORT=35882
    if [ $(hostname) = "materialscommons" ]; then
        export MCDIR=/mcfs/data/test
    else
        export MCDIR=~/mcdir/mcfs/data/test
    fi
    export MCFS_HTTP_PORT=5012

    if [ -f /etc/materialscommons/config.test ]; then
        . /etc/materialscommons/config.test
    fi
    if [ ! -d $MCDB_DIR ]; then
        mkdir $MCDB_DIR
    fi
    (cd $MCDB_DIR; rm -rf rethinkdb_data)
else
    export MCDB_PORT=28015
    export MC_SERVICE_PORT=5000
    export RETHINKDB_HTTP_PORT=8080
    export RETHINKDB_CLUSTER_PORT=29015
    export MCDB_DIR=~
    export MCFS_PORT=35862
    if [ $(hostname) = "materialscommons" ]; then
        export MCDIR=/mcfs/data/materialscommons
    else
        export MCDIR=~/mcdir/mcfs/data/materialscommons
    fi
    export MCFS_HTTP_PORT=5010
  
    if [ -f /etc/materialscommons/config.prod ]; then
        . /etc/materialscommons/config.prod
    fi
fi

case "$CMD" in
    start)
        start_servers
        ;;
    stop)
        if [ $TESTSERVER = false ]; then
            echo "**** You are stopping PRODUCTION ****"
            read -p "Are you sure you want to do this [y/n]? " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 0
            else
                echo "Shutting down production in 5 seconds CTRL-C to abort..."
                sleep 5
            fi
        fi
        stop_servers
        ;;
    status)
        status_servers
        ;;
    env)
        show_env
        ;;
    "")
        status_servers
        ;;    
    *)
        echo "Unknown command: $CMD"
        exit 1
        ;;
esac

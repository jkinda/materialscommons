const {Action} = require('actionhero');
const projects = require('../../lib/dal/projects');
const dal = require('../../lib/dal');

module.exports.GetProjectsForUserAction = class GetProjectsForUserAction extends Action {
    constructor() {
        super();
        this.name = 'ui:getProjectsForUser';
        this.description = 'Retrieve all projects for the given user';
        this.outputExample = projectForUsersExample;
    }

    async run({response, user}) {
        const usersProjects = await dal.tryCatch(async() => await projects.ui.getProjectsForUser(user.id));
        if (usersProjects === null) {
            throw new Error(`No such user`);
        }

        response.data = usersProjects;
    }
};

module.exports.GetProjectOverviewAction = class GetProjectOverviewAction extends Action {
    constructor() {
        super();
        this.name = 'ui:getProjectOverview';
        this.description = 'Retrieve a project for the given user';
        this.inputs = {
            project_id: {
                required: true,
            }
        };
        this.outputExample = projectOverviewExample;
    }

    async run({response, params}) {
        const proj = await dal.tryCatch(async() => await projects.ui.getProjectOverview(params.project_id));
        if (!proj) {
            throw new Error(`Unable to retrieve project ${params.project_id}`);
        }

        response.data = proj;
    }
};

module.exports.GetProjectNotesAction = class GetProjectsForUserAction extends Action {
    constructor() {
        super();
        this.name = 'ui:getProjectNotes';
        this.description = 'Retrieve notes for the given project';
        this.inputs = {
            project_id: {
                required: true,
            }
        };
        this.outputExample = {
            data: [
                {
                    birthtime: '2019-02-18T16:28:02.012Z',
                    id: '641c05cc-8db0-48f2-afac-e4ac102e72e8',
                    mtime: '2019-02-18T16:28:02.012Z',
                    note: '# Note',
                    owner: 'test@test.mc',
                    title: 'Notes 1'
                }
            ]
        };
    }

    async run({response, params}) {
        const notes = await dal.tryCatch(async() => await projects.ui.getProjectNotes(params.project_id));
        if (notes === null) {
            throw new Error(`Unable to retrieve notes for project ${params.project_id}`);
        }

        response.data = notes;
    }
};

module.exports.GetProjectAccessEntriesAction = class GetProjectsForUserAction extends Action {
    constructor() {
        super();
        this.name = 'ui:getProjectAccessEntries';
        this.description = 'Retrieve the access entries for the given project';
        this.inputs = {
            project_id: {
                required: true,
            }
        };
        this.outputExample = accessEntriesExample;
    }

    async run({response, params}) {
        const entries = await dal.tryCatch(async() => await projects.ui.getProjectAccessEntries(params.project_id));
        if (entries === null) {
            throw new Error(`Unable to retrieve access entries for project ${params.project_id}`);
        }

        response.data = entries;
    }
};

const projectForUsersExample = {
    data: [
        {
            'birthtime': '2019-02-08T21:14:14.461Z',
            'datasets_count': 0,
            'description': 'Test project generated by automated test',
            'experiments_count': 1,
            'id': 'a0786ca5-0aaa-43a4-8cf4-c9fb1b04465b',
            'mtime': '2019-02-08T21:14:14.461Z',
            'name': 'TestProject-04275',
            'otype': 'project',
            'owner': 'test@test.mc',
            'owner_details': {
                'fullname': 'Test User One'
            },
            'processes_count': 1,
            'root_dir': {
                'id': '67f83ebb-a1aa-4295-9f5d-44013fb26d39',
                'name': 'TestProject-04275'
            },
            'samples_count': 1,
            'shortcuts': [
                {
                    'id': '4db46162-370e-4c0d-98b8-7dfc47e7ddcf',
                    'name': 'TestProject-04275/Presentations'
                },
                {
                    'id': '23f43478-b831-4ac7-982a-e28265e2380b',
                    'name': 'TestProject-04275/Project Documents'
                },
                {
                    'id': 'd024ac23-be4f-479f-8062-e8135ed0f3a4',
                    'name': 'TestProject-04275/Literature'
                }
            ],
            'tags': [],
            'todos': [],
            'users_count': 1
        }
    ]
};

const projectOverviewExample = {
    data: {
        'birthtime': '2019-02-08T21:14:07.551Z',
        'datasets_count': 1,
        'description': 'Test project generated by automated test',
        'experiments': [
            {
                'birthtime': '2019-02-08T21:14:08.123Z',
                'description': 'Test experiment generated by automated test',
                'experiment_id': '163764d5-75c7-45f1-84fb-dd9cd7164d0c',
                'files_count': 1,
                'id': '163764d5-75c7-45f1-84fb-dd9cd7164d0c',
                'mtime': '2019-02-08T21:14:08.123Z',
                'name': 'TestExperiment-98872',
                'otype': 'experiment',
                'owner': 'test@test.mc',
                'owner_details': {
                    'fullname': 'Test User One'
                },
                'processes_count': 2,
                'samples_count': 1,
                'status': 'active'
            }
        ],
        'experiments_count': 1,
        'id': 'c667f810-6202-4f7f-9460-81029dac0840',
        'mtime': '2019-02-08T21:14:07.551Z',
        'name': 'Project-TestSampleAssociate',
        'otype': 'project',
        'owner': 'test@test.mc',
        'owner_details': {
            'fullname': 'Test User One'
        },
        'processes_count': 2,
        'root_dir': {
            'id': '8b10fd8b-cc80-4052-8c0f-29cde21b7cc7',
            'name': 'Project-TestSampleAssociate'
        },
        'samples_count': 1,
        'shortcuts': [
            {
                'id': '4e61da94-a10f-4351-a424-52dcdb179af1',
                'name': 'Project-TestSampleAssociate/Project Documents',
                'path': 'Project-TestSampleAssociate/Project Documents'
            },
            {
                'id': '04897bb1-0ee0-48dc-a3fc-963494b00130',
                'name': 'Project-TestSampleAssociate/Literature',
                'path': 'Project-TestSampleAssociate/Literature'
            },
            {
                'id': '4e4bc1a9-2e0f-4151-91f2-a322c92a6143',
                'name': 'Project-TestSampleAssociate/Presentations',
                'path': 'Project-TestSampleAssociate/Presentations'
            }
        ],
        'tags': [],
        'todos': [
            {
                'done': false,
                'edit': false,
                'title': 'My todo'
            }
        ],
        'users_count': 1
    }
};

const accessEntriesExample = {
    'data': [
        {
            'birthtime': '2019-01-17T15:14:48.488Z',
            'fullname': 'Test User One',
            'id': '7833e741-055f-4be2-b633-46822297e304',
            'user_id': 'test@test.mc'
        },
    ],
    'serverInformation': {
        'serverName': 'mcapid',
        'apiVersion': '0.1.0',
        'requestDuration': 3,
        'currentTime': 1550508999747
    },
    'requesterInformation': {
        'id': 'e3d4ca0e29b3b21c7eda53f525f4138106c19b81-ddcd18d6-d7fd-4fda-a4f1-99db799329f0',
        'fingerprint': 'e3d4ca0e29b3b21c7eda53f525f4138106c19b81',
        'messageId': 'ddcd18d6-d7fd-4fda-a4f1-99db799329f0',
        'remoteIP': '127.0.0.1',
        'receivedParams': {
            'project_id': 'c667f810-6202-4f7f-9460-81029dac0840',
            'action': 'ui:getProjectAccessEntries'
        }
    }
};
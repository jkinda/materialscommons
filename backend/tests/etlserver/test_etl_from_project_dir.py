import unittest
import pytest
import os
from random import randint
from materials_commons.api import create_project, get_all_projects
from servers.etlserver.globus.BuildProjectExperimentWithETL import BuildProjectExperiment
from servers.etlserver.common.worksheet_data import ExcelIO
from servers.etlserver.database.DatabaseInterface import DatabaseInterface

EXCEL_FILE_NAME = "small_input.xlsx"
DATA_DIR_NAME = "data"
TEST_DIR = "ForETL"
TEST_PROJECT_NAME = "Test1"
USER_TEST_PROJECT = True


def fake_name(prefix):
    number = "%05d" % randint(0, 99999)
    return prefix + number


class TestFileProcessSample(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.apikey = os.environ['MC_API_KEY']
        cls.project = None
        cls.project_id = None
        cls.project_name = None

        if USER_TEST_PROJECT:
            all_projects = get_all_projects()
            for project in all_projects:
                if project.name == TEST_PROJECT_NAME:
                    cls.project = project
                    cls.project_name = project.name
                    cls.project_id = project.id
                    break
        else:
            cls.project_name = fake_name("TestForETL-")
            description = "Test project generated by automated test"
            cls.project = create_project(cls.project_name, description)
            cls.project_id = cls.project.id

            project = cls.project
            cls.data_dir_path = os.path.abspath(os.environ['TEST_DATA_DIR'])
            project.local_path = cls.data_dir_path
            local_dir_path = os.path.join(cls.data_dir_path, TEST_DIR)
            project.add_directory_tree_by_local_path(local_dir_path)

    def test_is_setup_correctly(self):
        self.assertIn('MC_API_KEY', os.environ)
        self.assertIn('TEST_DATA_DIR', os.environ)
        self.assertIn('MCDIR', os.environ)
        self.assertIsNotNone(self.apikey, "Missing test api key; MC_API_KEY not set properly")

        self.assertIsNotNone(self.project)
        self.assertIsNotNone(self.project.name)
        self.assertEqual(self.project_name, self.project.name)
        self.assertIsNotNone(self.project.id)
        self.assertEqual(self.project_id, self.project.id)

        directory = self.project.get_top_directory()
        test_dir = None
        for file_or_dir in directory.get_children():
            print(file_or_dir.name)
            if file_or_dir.name == TEST_DIR:
                test_dir = file_or_dir
        self.assertIsNotNone(test_dir, "Missing directory for test data, {}".format(TEST_DIR))

        found_excel_file = False
        found_data_dir = False
        for file_or_dir in test_dir.get_children():
            print(file_or_dir.name)
            if file_or_dir.name == EXCEL_FILE_NAME:
                found_excel_file = True
            if file_or_dir.name == DATA_DIR_NAME:
                found_data_dir = True
        self.assertTrue(found_excel_file, "Missing Excel File, {}, in test data".format(EXCEL_FILE_NAME))
        self.assertTrue(found_data_dir, "Missing Data Dir, {}, in test data".format(DATA_DIR_NAME))

    def test_server_side_file_for_internal_path(self):
        builder = BuildProjectExperiment(self.apikey)

        self.assertIn('MCDIR', os.environ)
        spread_sheet_path = os.path.join(TEST_DIR, EXCEL_FILE_NAME)
        top_directory = self.project.get_top_directory()
        file = builder._find_file_in_dir(top_directory, spread_sheet_path.split('/'))
        self.assertIsNotNone(file, "Could not find file, '{}' in project directories".format(spread_sheet_path))

        internal_file_path = builder._server_side_file_path_for_project_path(self.project, spread_sheet_path)
        self.assertIsNotNone(internal_file_path, "Could not find internal file path for file, '{}'"
                             .format(spread_sheet_path))

    def test_builder_gets_spreadsheet_data(self):
        builder = BuildProjectExperiment(self.apikey)
        spread_sheet_path = os.path.join(TEST_DIR, EXCEL_FILE_NAME)
        builder._set_etl_source_date_from_path(self.project, spread_sheet_path)
        print(builder.etl_source_data[1][1])

    @pytest.mark.skip()
    def test_build_experiment_from_etl(self):
        self.assertIn('MCDIR', os.environ)
        print("\nStarting test...")
        print("  Project name = {}".format(self.project.name))
        print("  Internal Test Dir path = {}".format(TEST_DIR))
        print("  Internal Excel File name = {}".format(EXCEL_FILE_NAME))
        print("  Internal Data Dir name = {}".format(DATA_DIR_NAME))
        directory = self.project.get_top_directory()
        test_dir = None
        for file_or_dir in directory.get_children():
            if file_or_dir.name == TEST_DIR:
                test_dir = file_or_dir
        self.assertIsNotNone(test_dir, "Missing directory for test data, {}".format(TEST_DIR))
        excel_file = None
        data_dir = None
        for file_or_dir in test_dir.get_children():
            if file_or_dir.name == EXCEL_FILE_NAME:
                excel_file = file_or_dir
            if file_or_dir.name == DATA_DIR_NAME:
                data_dir = file_or_dir
        self.assertIsNotNone(excel_file, "Missing Excel File, {}, in test data".format(EXCEL_FILE_NAME))
        self.assertIsNotNone(data_dir, "Missing Data Dir, {}, in test data".format(DATA_DIR_NAME))

        builder = BuildProjectExperiment(self.apikey)
        spreadsheet_path = os.path.join(TEST_DIR, EXCEL_FILE_NAME)
        data_dir_path = os.path.join(TEST_DIR, DATA_DIR_NAME)
        print("For ETL: spreadsheet_path = {}, data_dir_path = {}".format(spreadsheet_path, data_dir_path))
        experiment_name = "Test of internal ETL"
        builder.build(spreadsheet_path, data_dir_path, self.project.id, experiment_name)

    def test_open_excel_row(self):
        builder = BuildProjectExperiment(self.apikey)
        spread_sheet_path = os.path.join(TEST_DIR, EXCEL_FILE_NAME)
        internal_file_path = builder._server_side_file_path_for_project_path(self.project, spread_sheet_path)

        # SET UP THE LINK
        uuid = DatabaseInterface().get_uuid()
        mcdir = os.environ['MCDIR'].split(':')[0]
        link_base_path = os.path.join(mcdir, 'ExcelFileLinks')
        file_name = "{}.xlsx".format(uuid)
        link_path = os.path.join(link_base_path, file_name)
        os.link(internal_file_path, link_path)

        # READ DATA
        sheet_name_list = None
        source_data = None
        # noinspection PyBroadException
        try:
            excel_io_controller = ExcelIO()
            excel_io_controller.read_workbook(link_path)
            sheet_name_list = excel_io_controller.sheet_name_list()
            excel_io_controller.set_current_worksheet_by_index(0)
            source_data = excel_io_controller.read_entire_data_from_current_sheet()
            excel_io_controller.close()
        except BaseException as e:
            print("Reading failed: {}".format(e))

        # TAKE DOWN LINK
        os.unlink(link_path)

        sheet_name = sheet_name_list[0]
        self.assertEqual(sheet_name, 'Sheet')
        self.assertEqual(source_data[0][0], 'PROJ: Generic Testing')

    def test_open_excel_in_builder(self):
        builder = BuildProjectExperiment(self.apikey)
        spread_sheet_path = os.path.join(TEST_DIR, EXCEL_FILE_NAME)
        builder._set_etl_source_date_from_path(self.project, spread_sheet_path)
        self.assertEqual(builder.etl_source_data[0][0], 'PROJ: Generic Testing')
